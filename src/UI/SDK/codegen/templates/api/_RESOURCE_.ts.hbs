{{#resource.fileImports}}
import { {{this}} } from '../models/{{this}}';
{{/resource.fileImports}}
import { RequiredDeep } from '../models/RequiredDeep';
import { ListArgs } from '../models/ListArgs'
import httpClient from '../utils/HttpClient';

export default class {{resource.id}} {
    private impersonating:boolean = false;

    /**
    * @ignore
    * not part of public api, don't include in generated docs
    */
    constructor() {
        {{#resource.operations}}
        this.{{name}} = this.{{name}}.bind(this);
        {{/resource.operations}}
    }

    {{#resource.operations}}
   /**{{#allParams}}
    * @param {{#if isQueryParam}}options.{{name}} {{description}}{{else}}{{name}} {{description}}{{#if isBodyParam}}{{#if hasRequiredFields}}Required fields: {{commaSeparate requiredFields}}{{/if}}{{/if}}{{/if}}{{/allParams}}
    * @param accessToken Provide an alternative token to the one stored in the sdk instance (useful for impersonation).
    */
    public async {{name}}({{#allParams}}{{#unless isQueryParam}}{{#if isBodyParam}}{{#if ../isPatch}}{{name}}: PartialDeep<{{typescriptType}}>, {{else}}{{name}}: {{typescriptType}},{{/if}}{{else}}{{name}}: {{typescriptType}}, {{/if}}{{/unless}}{{/allParams}} {{#if hasQueryParams}}{{#if isList}}options: ListArgs<{{#if hasBaseType}}{{baseType}}{{else}}any{{/if}}> = {}, {{else}}{{#queryParams}}{{name}}: {{typescriptType}}, {{/queryParams}}{{/if}}{{/if}}accessToken?: string ): Promise<{{#if hasReturnType}}RequiredDeep<{{#if isList}}{{#if isFacetList}}ListPageFacet<{{baseType}}>{{else}}ListPage<{{baseType}}>{{/if}}{{else}}{{returnType}}{{/if}}>{{else}}void{{/if}}> {
        const impersonating = this.impersonating;
        this.impersonating = false;
        return await httpClient.{{verb}}(`{{parameterizePath path}}`{{#if hasBodyParam}}, {{bodyParam.name}}{{/if}}, { params: { {{#if hasQueryParams}}{{#if isList}}...options, {{else}}{{#queryParams}}{{name}}, {{/queryParams}}{{/if}}{{/if}} {{#if hasFilters}}filters: options.filters, {{/if}}accessToken, impersonating } } );
    }

    {{/resource.operations}}
    /**
     * @description 
     * enables impersonation by calling the subsequent method with the stored impersonation token
     * 
     * @example
     * {{resource.id}}.As().List() // lists {{resource.id}} using the impersonated users' token
     */
    public As(): this {
        this.impersonating = true;
        return this;
    }
}
