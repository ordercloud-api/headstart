resources:
  repositories:
    - repository: self
      type: git
      ref: development
jobs:
  - job: Build_MiddleWare
    pool:
      vmImage: windows-2022
    displayName: Build Middleware
    steps:
      - checkout: self
      - template: version.yml
      - task: NuGetToolInstaller@1
        displayName: "Use NuGet "
      - task: NuGetCommand@2
        displayName: NuGet restore
      - task: VSBuild@1
        displayName: Build solution src/Middleware/Headstart.sln
        inputs:
          solution: src/Middleware/Headstart.sln
      - task: VSTest@2
        displayName: Run C# Unit tests
        inputs:
          testAssemblyVer2: >-
            **\*.tests.dll

            !**\obj\**
      - task: DotNetCoreCLI@2
        displayName: Build Jobs
        inputs:
          projects: "**/Headstart.Jobs.csproj"
          arguments: "--configuration Release"
      - task: DotNetCoreCLI@2
        displayName: "Publish Jobs"
        inputs:
          command: publish
          publishWebProjects: false
          projects: "**/Headstart.Jobs.csproj"
          arguments: "--configuration Release --output jobs"
          zipAfterPublish: false
      - task: DotNetCoreCLI@2
        displayName: Build Middleware
        inputs:
          projects: "**/Headstart.API.csproj"
          arguments: --configuration Release
      - task: DotNetCoreCLI@2
        displayName: Publish Middleware
        inputs:
          command: publish
          publishWebProjects: false
          projects: "**/Headstart.API.csproj"
          arguments: --configuration Release --output middleware
          zipAfterPublish: false
      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: Middleware"
        inputs:
          PathtoPublish: middleware
          ArtifactName: middleware
      - task: PublishBuildArtifacts@1
        displayName: "Publish Jobs Artifacts"
        inputs:
          PathtoPublish: jobs
          ArtifactName: jobs
  - job: Build_Buyer
    pool:
      vmImage: windows-2022
    displayName: Build Buyer
    steps:
      - task: NodeTool@0
        displayName: "Use Node 18.x"
        inputs:
          versionSpec: 18.x

      - task: Cache@2
        displayName: "SDK Dependencies Cache"
        inputs:
          key: 'npm | sdk | "$(Agent.OS)" | src/UI/SDK/package.json'
          path: "src/UI/SDK/node_modules"
          cacheHitVar: SDKCacheRestored

      - task: Npm@1
        displayName: "Install SDK Dependencies"
        inputs:
          workingDir: src/UI/SDK
          verbose: false
        condition: ne(variables['SDKCacheRestored'], 'true')

      - script: "npm run build"
        workingDirectory: src/UI/SDK
        displayName: "Build SDK"

      - task: Cache@2
        displayName: "Buyer Dependencies Cache"
        inputs:
          key: 'npm | buyer | "$(Agent.OS)" | src/UI/Buyer/package-lock.json | src/UI/Buyer/package.json | src/UI/SDK/files-changed-hash | v2'
          path: "src/UI/Buyer/node_modules"
          cacheHitVar: BuyerCacheRestored

      - task: Npm@1
        displayName: "Install Buyer Dependencies"
        inputs:
          workingDir: src/UI/Buyer
          verbose: false
        condition: ne(variables['BuyerCacheRestored'], 'true')

      - script: "npm run preinstall && npm run build"
        workingDirectory: src/UI/Buyer
        displayName: "Build Buyer"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Buyer Artifacts"
        inputs:
          PathtoPublish: "src/UI/Buyer/dist"
          ArtifactName: buyer
  - job: Build_Seller
    pool:
      vmImage: windows-2022
    displayName: Build Seller
    steps:
      - task: NodeTool@0
        displayName: "Use Node 18.x"
        inputs:
          versionSpec: 18.x

      - task: Cache@2
        displayName: "SDK Dependencies Cache"
        inputs:
          key: 'npm | sdk | "$(Agent.OS)" | src/UI/SDK/package.json'
          path: "src/UI/SDK/node_modules"
          cacheHitVar: SDKCacheRestored

      - task: Npm@1
        displayName: "Install SDK Dependencies"
        inputs:
          workingDir: src/UI/SDK
          verbose: false
        condition: ne(variables['SDKCacheRestored'], 'true')

      - script: "npm run build"
        workingDirectory: src/UI/SDK
        displayName: "Build SDK"

      - task: Cache@2
        displayName: "Seller Dependencies Cache"
        inputs:
          key: 'npm | seller | v2 | "$(Agent.OS)" | src/UI/Seller/package-lock.json | src/UI/Seller/package.json | src/UI/SDK/files-changed-hash'
          path: "src/UI/Seller/node_modules"
          cacheHitVar: SellerCacheRestoredV2

      - task: Npm@1
        displayName: "Install Seller Dependencies"
        inputs:
          workingDir: src/UI/Seller
          verbose: false
        condition: ne(variables['SellerCacheRestoredV2'], 'true')

      - script: "npm run build"
        workingDirectory: src/UI/Seller
        displayName: "Build Seller"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Seller Artifacts"
        inputs:
          PathtoPublish: src/UI/Seller/dist
          ArtifactName: seller
